class Deletion

  def self.delete_game game
    ("deletion of game: " + game.name).color(:green).out
    planets = game.planets.all
    ("planets = " + planets.count.to_s).out
    cells = game.cells.all
    ("cells = " + cells.count.to_s).out
    players = game.players.all
    ("players = " + players.count.to_s).out
    if planets
      "planets".rjust(160).color(:white).out
      planets.each do |planet| 
        Deletion.de(Deletion.cm planet, :cell)
        Deletion.de(Deletion.cm planet, :player)
        Deletion.de planet 
      end
      "planets end".rjust(160).color(:white).out
    end
    if cells
      "cells".rjust(160).color(:white).out
      Deletion.de(Deletion.cm cells.first, :game)
      cells.each { |cell| Deletion.de cell }
      "cells end".rjust(160).color(:white).out
    end
    if players
      "players".rjust(160).color(:white).out
      Deletion.de(Deletion.cm players.first, :game)
      players.each { |player| Deletion.de player }
      "players end".rjust(160).color(:white).out
    end
    Deletion.de game
    "after deletion".rjust(160).color(:yellowgreen).out
    ("planets = " + planets.count.to_s).out
    ("cells = " + cells.count.to_s).out
    ("players = " + players.count.to_s).out
  end

  def self.de obj #destroy if exist
    "destroy: ".rjust(50).color("yellowgreen").out
    obj.to_s.color(:gray).out
    if obj
      p "before destroy"
      obj.destroy
      p "after destroy"
    else
      "nil".color(:red).out
      nil
    end
  end

  def self.cm obj, meth #call method if obj exist 
    "call: ".rjust(50).color("yellowgreen").out
    ("obj = " + obj.to_s + " meth = " + meth.to_s).color(:gray).out
    if obj
      "send!".rjust(50).color(:orange).print_
      obj.send(meth.to_sym).to_s.color(:orange).out
      obj.send meth.to_sym
    else
      "nil".rjust(50).color(:red).out
      nil
    end
  end

end